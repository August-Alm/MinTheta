def Hom = λA.λB.θf.λx.[(f [x : A]) ⇓ B]

# t, u ::= x | λx.t | (t u) | θx.t | [t : u] | [t ⇓ u]
# 
# x* = x, (λx.t)* = λx.t*,
# (t u)* = (t* u*), (θx.t)* = θx.t*,
# [t : u]* = [t* ⇓ u*], [t ⇓ u]* = [t* : u*]
# 
# (λx.t u) -> t{x := u}
# (θx.t u) -> θx.(t u)
# [t : θy.u] -> u*{y := t}
# [t ⇓ θy.u] -> u{y := t}
# [λx.t : λx.u] -> λx.[t : u]
# [λx.t ⇓ λx.u] -> λx.[t ⇓ u]
# [t : λy.u] -> λy.[(t y) : u]
# [t ⇓ λy.u] -> λy.[(t y) ⇓ u]
# [[t : a] ⇓ b] when a ~ b -> t

# Dependent pairs, aka `Σx:A.B`.
def Sig = λA.λB.θpar.(par λx.λy.λp.(p [x : A] [y ⇓ (B x)]))

def FMap = λF.λX.λY.(Hom (Hom X Y) (Hom (F X) (F Y)))

def Func = θfunc.(func λF.λfmap.λp.(p F [fmap ⇓ (FMap F)]))

# Consider as Yoneda functor.
def h = Hom

# `(hmap A)` shows `(h A)` is a functor.
let hmap : λA.(FMap (h A))
  = λA.λX.λY.λf.λg.λa.(f (g a))

def Alg = λF.λX.(Hom (F X) X)

def Free = λF.λX.(Hom (Alg F X) X)

def Fold = λF.λX.(Hom (Alg F X) (Hom (Free F) X))

let fold : Fold = λF.λX.λk.λt.(t X k)

# If `F` is a functor with `fmap`:
let in : λF.(Hom (FMap F) (Hom (F (Free F)) (Free F)))
  = λF.λfmap.λs.λX.λk.(k (fmap (Free F) X (fold F X k) s))

let Fold : kext
  = ΛF.ΛX.((Hom ((Alg F) X) ((Hom (Free F)) X)))

let fold : Fold
  = λF.λX.λk.λt.((t X) k)

let in : ΛF.((Hom (FMap F)) ((Hom (F (Free F))) (Free F)))
  = λF.λfmap.λs.λX.λk.(k ((((fmap (Free F)) X) (((fold F) X) k)) s))